name: Deploy to Amazon EC2

on:
  push:
    branches: ["feature/105/nginxDeployment"]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: sparta-project-build
  CODE_DEPLOY_APPLICATION_NAME: codedeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: deployment-group-dongnaebangnae

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # (3) application.properties 생성
      - name: Make an application.properties
        run: |
          mkdir -p ./src/main/resources 
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties 
          cat ./src/main/resources/application.properties

      # (4) Gradle build (Test 제외)
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-    

      - name: Setup Gradle and Build
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.7
          arguments: clean build -x test

      # 실제 필요한 파일(Jar, appspect.yml, 배포 스크립트)만 담기
      - name: zip 파일 생성
        run: |
          mkdir -p deploy/scripts
          cp scripts/*.sh deploy/scripts
          cp appspec.yml deploy/
          cp build/libs/*.jar deploy/
          cd deploy && zip -r ./$GITHUB_SHA.zip *
        shell: bash

      # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws s3 cp deploy/$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip


      # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip